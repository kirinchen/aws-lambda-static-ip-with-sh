AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template describing how to make a lambda function that sends traffic through a static IP

Resources:
  # Create VPC with hardcoded CIDR Block
  StaticIpVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16  # Hardcoded VPC CIDR block
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  # Create public subnet with hardcoded CIDR Block
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StaticIpVpc
      CidrBlock: 10.0.1.0/24  # Hardcoded public subnet CIDR block
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  # Create private subnet with hardcoded CIDR Block
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StaticIpVpc
      CidrBlock: 10.0.2.0/24  # Hardcoded private subnet CIDR block
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref StaticIpVpc

  VpcPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StaticIpVpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref VpcPublicRouteTable
      GatewayId: !Ref InternetGateway      

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcPublicRouteTable
      SubnetId: !Ref PublicSubnet

  ElasticIp:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet

  VpcPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StaticIpVpc

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref VpcPrivateRouteTable
      NatGatewayId: !Ref NatGateway      

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcPrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # Create Security Group for Lambda
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic for Lambda
      VpcId: !Ref StaticIpVpc
      SecurityGroupIngress:
        - IpProtocol: -1  # -1 means all protocols (supports all types)
          FromPort: 0     # Allow all ports
          ToPort: 65535   # Allow all ports
          CidrIp: 0.0.0.0/0  # Allow from all IPs
      SecurityGroupEgress:
        - IpProtocol: -1  # Allow all outbound traffic
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0


  StaticIpLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/static-ip-lambda
      Handler: static-ip-lambda.lambdaHandler
      Runtime: nodejs18.x  # Updated to nodejs18.x
      Timeout: 100      
      Role: !GetAtt StaticIpLambdaRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup  # Use the created Security Group
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          STATIC_IP: !Ref ElasticIp

  StaticIpLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole


